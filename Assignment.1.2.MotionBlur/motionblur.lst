


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             MotionBlur, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000                 IMPORT           getPicAddr
    4 00000000                 IMPORT           putPic
    5 00000000                 IMPORT           getPicWidth
    6 00000000                 IMPORT           getPicHeight
    7 00000000                 EXPORT           start
    8 00000000         
    9 00000000         start
   10 00000000         
   11 00000000 EBFFFFFE        BL               getPicAddr  ; load the start ad
                                                            dress of the image 
                                                            in R4
   12 00000004 E1A04000        MOV              R4, R0
   13 00000008 EBFFFFFE        BL               getPicHeight ; load the height 
                                                            of the image (rows)
                                                             in R5
   14 0000000C E1A05000        MOV              R5, R0
   15 00000010 EBFFFFFE        BL               getPicWidth ; load the width of
                                                             the image (columns
                                                            ) in R6
   16 00000014 E1A06000        MOV              R6, R0
   17 00000018         
   18 00000018 E1A00004        MOV              R0, R4
   19 0000001C E1A02006        MOV              R2, R6
   20 00000020 E1A03005        MOV              R3, R5
   21 00000024 E3A0100A        MOV              R1, #10
   22 00000028         ;R0 - Start address
   23 00000028         ;R1 - Radius
   24 00000028         ;R2 - Picture Width
   25 00000028         ;R3 - Picture Height 
   26 00000028         
   27 00000028         blur
   28 00000028 E1A04000        MOV              R4, R0
   29 0000002C E1A05002        MOV              R5, R2
   30 00000030 E1A06003        MOV              R6, R3
   31 00000034 E3A07000        MOV              R7, #0      ;X
   32 00000038 E3A08000        MOV              R8, #0      ;Y
   33 0000003C E1A09001        MOV              R9, R1
   34 00000040         OuterLoop
   35 00000040         
   36 00000040 E1570005        CMP              R7, R5      ;If the outer X pos
                                                            ition (x in the ima
                                                            ge) has not reached
                                                             the edge
   37 00000044 1A000003        BNE              startInnerLoop ;Start the inner
                                                             loop 
   38 00000048 E3A07000        MOV              R7, #0      ;Else, set X to 0
   39 0000004C E2888001        ADD              R8, #1      ;Add 1 to Y
   40 00000050 E1580006        CMP              R8, R6      ;If we've reached t
                                                            he bottom of the im
                                                            age
   41 00000054 0A000048        BEQ              putPicture  ;Display the pictur
                                                            e
   42 00000058         
   43 00000058         startInnerLoop                       ;The inner loop han
                                                            dles the diagonal l
                                                            ine through each pi
                                                            cture which calcula



ARM Macro Assembler    Page 2 


                                                            tes the value for t
                                                            he current pixel
   44 00000058 E1A00007        MOV              R0, R7
   45 0000005C E1A01008        MOV              R1, R8
   46 00000060 E92D0003        STMFD            sp!, {R0-R1} ;Store the current
                                                             global pixel's coo
                                                            rdinates
   47 00000064 E0477009        SUB              R7, R9      ;Subtract the radiu
                                                            s from X
   48 00000068 E0488009        SUB              R8, R9      ;Subtract the radiu
                                                            s from Y
   49 0000006C E3A03000        MOV              R3, #0      ;Set the number of 
                                                            values sampled to 0
                                                            
   50 00000070 E3A0A000        MOV              R10, #0     ;Set the current re
                                                            d total to 0
   51 00000074 E3A0B000        MOV              R11, #0     ;Set the current gr
                                                            een total to 0
   52 00000078 E3A0C000        MOV              R12, #0     ;Set the current bl
                                                            ue total to 0
   53 0000007C         innerLoop
   54 0000007C E3570000        CMP              R7, #0      ;If the pixel is ou
                                                            t of the bounds of 
                                                            the image, don't in
                                                            clude it in the blu
                                                            r
   55 00000080 BA000012        BLT              skipPixel
   56 00000084 E1570005        CMP              R7, R5
   57 00000088 AA000010        BGE              skipPixel
   58 0000008C E3580000        CMP              R8, #0
   59 00000090 BA00000E        BLT              skipPixel
   60 00000094 E1580006        CMP              R8, R6
   61 00000098 AA00000C        BGE              skipPixel
   62 0000009C E0020598        MUL              R2, R8, R5
   63 000000A0 E0822007        ADD              R2, R2, R7
   64 000000A4 E7941102        LDR              R1, [R4, R2, LSL #2] ;Load the 
                                                            pixel from the curr
                                                            ent position in the
                                                             diagonal line
   65 000000A8 E1A00001        MOV              R0, R1
   66 000000AC EB00003B        BL               getRed      ;Get the red compon
                                                            ent of the color
   67 000000B0 E08AA000        ADD              R10, R0
   68 000000B4 E1A00001        MOV              R0, R1
   69 000000B8 EB00003A        BL               getGreen    ;Get the green comp
                                                            onent
   70 000000BC E08BB000        ADD              R11, R0
   71 000000C0 E1A00001        MOV              R0, R1
   72 000000C4 EB00003A        BL               getBlue     ;Get the blue compo
                                                            nent
   73 000000C8 E08CC000        ADD              R12, R0
   74 000000CC E2833001        ADD              R3, #1      ;The number of valu
                                                            es taken so the ave
                                                            rage can be found
   75 000000D0         skipPixel
   76 000000D0 E2877001        ADD              R7, #1      ;Go to the next pix
                                                            el in the diagonal 
                                                            line
   77 000000D4 E2888001        ADD              R8, #1



ARM Macro Assembler    Page 3 


   78 000000D8 E89D0003        LDMFD            sp, {R0-R1} ;Load the global X 
                                                            and Y coordinates
   79 000000DC E0802009        ADD              R2, R0, R9  ;Add the radius to 
                                                            the global X coordi
                                                            nate to get the end
                                                             position of the di
                                                            agonal line
   80 000000E0 E1570002        CMP              R7, R2
   81 000000E4 CA000000        BGT              endInner    ;If greater, end th
                                                            e inner loop and mo
                                                            ve to the next pixe
                                                            l in the image
   82 000000E8 EAFFFFE3        B                innerLoop   ;Else, move to the 
                                                            next pixel in the d
                                                            iagonal line
   83 000000EC         endInner
   84 000000EC E92D0003        STMFD            sp!, {R0-R1} ;Store the global 
                                                            X, Y coordinates
   85 000000F0 E1A0100A        MOV              R1, R10
   86 000000F4 E1A02003        MOV              R2, R3
   87 000000F8 EB000030        BL               divide      ;Divide the red tot
                                                            al by the number of
                                                             values sampled to 
                                                            get the average
   88 000000FC E1A0A000        MOV              R10, R0
   89 00000100 E1A0100B        MOV              R1, R11
   90 00000104 E1A02003        MOV              R2, R3
   91 00000108 EB00002C        BL               divide      ;Divide the green t
                                                            otal by the number 
                                                            of values sampled t
                                                            o get the average
   92 0000010C E1A0B000        MOV              R11, R0
   93 00000110 E1A0100C        MOV              R1, R12
   94 00000114 E1A02003        MOV              R2, R3
   95 00000118 EB000028        BL               divide      ;Divide the green t
                                                            otal by the number 
                                                            of values sampled t
                                                            o get the average
   96 0000011C E1A0C000        MOV              R12, R0
   97 00000120 E1A0000C        MOV              R0, R12
   98 00000124 E3A01000        MOV              R1, #0
   99 00000128 E3A020FF        MOV              R2, #0x000000FF
  100 0000012C EB000014        BL               clamp       ;Clamp the red comp
                                                            onent between 0-255
                                                            
  101 00000130 E1A0C000        MOV              R12, R0
  102 00000134 E1A0000B        MOV              R0, R11
  103 00000138 EB000011        BL               clamp       ;Clamp the green co
                                                            mponent between 0-2
                                                            55
  104 0000013C E1A0B000        MOV              R11, R0
  105 00000140 E1A0000A        MOV              R0, R10
  106 00000144 EB00000E        BL               clamp       ;Clamp the blue com
                                                            ponent between 0-25
                                                            5
  107 00000148 E1A0A000        MOV              R10, R0
  108 0000014C E1A0B40B        LSL              R11, #8     ;Shift the green co
                                                            mponent
  109 00000150 E1A0C80C        LSL              R12, #16    ;Shift the blue com



ARM Macro Assembler    Page 4 


                                                            ponent
  110 00000154 E08AA00B        ADD              R10, R11
  111 00000158 E08AA00C        ADD              R10, R12    ;Add the resulting 
                                                            components together
                                                             to form the final 
                                                            color
  112 0000015C E8BD0003        LDMFD            sp!, {R0-R1} ;Load the global X
                                                            ,Y coordinates
  113 00000160 E0020591        MUL              R2, R1, R5
  114 00000164 E0802002        ADD              R2, R0, R2
  115 00000168 E784A102        STR              R10, [R4, R2, LSL #2] ;Store th
                                                            e calculated color 
                                                            into the image
  116 0000016C E1A07000        MOV              R7, R0
  117 00000170 E1A08001        MOV              R8, R1
  118 00000174 E2877001        ADD              R7, #1      ;Move to the next p
                                                            ixel
  119 00000178 EAFFFFB0        B                OuterLoop   ;Start the loop aga
                                                            in
  120 0000017C         
  121 0000017C         putPicture
  122 0000017C EBFFFFFE        BL               putPic      ; re-display the up
                                                            dated image
  123 00000180 EA000015        B                stop
  124 00000184         
  125 00000184         ;Clamp
  126 00000184         ;Clamps a value between a given minimum and maximum
  127 00000184         ;R0 - Value, R1 - Minimum, R2 - Maximum
  128 00000184         ;Returns clamped value in R0
  129 00000184         clamp
  130 00000184 E1500001        CMP              R0, R1
  131 00000188 AA000000        BGE              checkMax
  132 0000018C E1A00001        MOV              R0, R1
  133 00000190         checkMax
  134 00000190 E1500002        CMP              R0, R2
  135 00000194 DA000000        BLE              endClamp
  136 00000198 E1A00002        MOV              R0, R2
  137 0000019C         endClamp
  138 0000019C E12FFF1E        BX               lr
  139 000001A0         
  140 000001A0         ;getRed
  141 000001A0         ;Returns the red component value of a colour
  142 000001A0         ;Parameters: Colour: R0, Returns R value in R0
  143 000001A0         getRed
  144 000001A0 E20000FF        AND              R0, #0x000000FF
  145 000001A4 E12FFF1E        BX               lr
  146 000001A8         
  147 000001A8         ;getGreen
  148 000001A8         ;Returns the red component value of a colour
  149 000001A8         ;Parameters: Colour: R0, Returns G value in R0
  150 000001A8         getGreen
  151 000001A8 E2000CFF        AND              R0, #0x0000FF00
  152 000001AC E1A00420        LSR              R0, #8
  153 000001B0 E12FFF1E        BX               lr
  154 000001B4         
  155 000001B4         ;getBlue
  156 000001B4         ;Returns the blue component value of a colour
  157 000001B4         ;Parameters: Colour: R0, Returns B value in R0
  158 000001B4         getBlue



ARM Macro Assembler    Page 5 


  159 000001B4 E20008FF        AND              R0, #0x00FF0000
  160 000001B8 E1A00820        LSR              R0, #16
  161 000001BC E12FFF1E        BX               lr
  162 000001C0         
  163 000001C0         ;Divide
  164 000001C0         ;Divides A by B
  165 000001C0         ;Parameters: A : R1, B : R2  Returns quotient in R0
  166 000001C0         divide
  167 000001C0 E3A00000        MOV              R0, #0
  168 000001C4         whilediv
  169 000001C4 E1510002        CMP              R1, R2
  170 000001C8 3A000002        BLO              stopdivide
  171 000001CC E2800001        ADD              R0, #1
  172 000001D0 E0411002        SUB              R1, R2
  173 000001D4 EAFFFFFA        B                whilediv
  174 000001D8         stopdivide
  175 000001D8 E12FFF1E        BX               lr
  176 000001DC EAFFFFFE 
                       stop    B                stop
  177 000001E0         
  178 000001E0         
  179 000001E0                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\m
otionblur.d -o.\motionblur.o -ID:\Arm\ARM\RV31\INC -ID:\Arm\ARM\CMSIS\Include -
ID:\Arm\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SET
A 1" --predefine="__UVISION_VERSION SETA 517" --predefine="NO_CLOCK_SETUP SETA 
1" --predefine="NO_EMC_SETUP SETA 1" --predefine="RAM_INTVEC SETA 1" --predefin
e="RAM_MODE SETA 1" --predefine="REMAP SETA 1" --list=.\motionblur.lst MotionBl
ur.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MotionBlur 00000000

Symbol: MotionBlur
   Definitions
      At line 1 in file MotionBlur.s
   Uses
      None
Comment: MotionBlur unused
OuterLoop 00000040

Symbol: OuterLoop
   Definitions
      At line 34 in file MotionBlur.s
   Uses
      At line 119 in file MotionBlur.s
Comment: OuterLoop used once
blur 00000028

Symbol: blur
   Definitions
      At line 27 in file MotionBlur.s
   Uses
      None
Comment: blur unused
checkMax 00000190

Symbol: checkMax
   Definitions
      At line 133 in file MotionBlur.s
   Uses
      At line 131 in file MotionBlur.s
Comment: checkMax used once
clamp 00000184

Symbol: clamp
   Definitions
      At line 129 in file MotionBlur.s
   Uses
      At line 100 in file MotionBlur.s
      At line 103 in file MotionBlur.s
      At line 106 in file MotionBlur.s

divide 000001C0

Symbol: divide
   Definitions
      At line 166 in file MotionBlur.s
   Uses
      At line 87 in file MotionBlur.s
      At line 91 in file MotionBlur.s
      At line 95 in file MotionBlur.s

endClamp 0000019C

Symbol: endClamp
   Definitions
      At line 137 in file MotionBlur.s
   Uses
      At line 135 in file MotionBlur.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: endClamp used once
endInner 000000EC

Symbol: endInner
   Definitions
      At line 83 in file MotionBlur.s
   Uses
      At line 81 in file MotionBlur.s
Comment: endInner used once
getBlue 000001B4

Symbol: getBlue
   Definitions
      At line 158 in file MotionBlur.s
   Uses
      At line 72 in file MotionBlur.s
Comment: getBlue used once
getGreen 000001A8

Symbol: getGreen
   Definitions
      At line 150 in file MotionBlur.s
   Uses
      At line 69 in file MotionBlur.s
Comment: getGreen used once
getRed 000001A0

Symbol: getRed
   Definitions
      At line 143 in file MotionBlur.s
   Uses
      At line 66 in file MotionBlur.s
Comment: getRed used once
innerLoop 0000007C

Symbol: innerLoop
   Definitions
      At line 53 in file MotionBlur.s
   Uses
      At line 82 in file MotionBlur.s
Comment: innerLoop used once
putPicture 0000017C

Symbol: putPicture
   Definitions
      At line 121 in file MotionBlur.s
   Uses
      At line 41 in file MotionBlur.s
Comment: putPicture used once
skipPixel 000000D0

Symbol: skipPixel
   Definitions
      At line 75 in file MotionBlur.s
   Uses
      At line 55 in file MotionBlur.s
      At line 57 in file MotionBlur.s
      At line 59 in file MotionBlur.s
      At line 61 in file MotionBlur.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


start 00000000

Symbol: start
   Definitions
      At line 9 in file MotionBlur.s
   Uses
      At line 7 in file MotionBlur.s
Comment: start used once
startInnerLoop 00000058

Symbol: startInnerLoop
   Definitions
      At line 43 in file MotionBlur.s
   Uses
      At line 37 in file MotionBlur.s
Comment: startInnerLoop used once
stop 000001DC

Symbol: stop
   Definitions
      At line 176 in file MotionBlur.s
   Uses
      At line 123 in file MotionBlur.s
      At line 176 in file MotionBlur.s

stopdivide 000001D8

Symbol: stopdivide
   Definitions
      At line 174 in file MotionBlur.s
   Uses
      At line 170 in file MotionBlur.s
Comment: stopdivide used once
whilediv 000001C4

Symbol: whilediv
   Definitions
      At line 168 in file MotionBlur.s
   Uses
      At line 173 in file MotionBlur.s
Comment: whilediv used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

getPicAddr 00000000

Symbol: getPicAddr
   Definitions
      At line 3 in file MotionBlur.s
   Uses
      At line 11 in file MotionBlur.s
Comment: getPicAddr used once
getPicHeight 00000000

Symbol: getPicHeight
   Definitions
      At line 6 in file MotionBlur.s
   Uses
      At line 13 in file MotionBlur.s
Comment: getPicHeight used once
getPicWidth 00000000

Symbol: getPicWidth
   Definitions
      At line 5 in file MotionBlur.s
   Uses
      At line 15 in file MotionBlur.s
Comment: getPicWidth used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file MotionBlur.s
   Uses
      None
Comment: main unused
putPic 00000000

Symbol: putPic
   Definitions
      At line 4 in file MotionBlur.s
   Uses
      At line 122 in file MotionBlur.s
Comment: putPic used once
5 symbols
362 symbols in table
